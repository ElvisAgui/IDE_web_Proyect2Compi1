/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserInstru = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,9],$V3=[1,10],$V4=[16,20,21,22,23,24,28,41,43,44,49,50],$V5=[1,38],$V6=[1,58],$V7=[1,50],$V8=[1,52],$V9=[1,53],$Va=[1,54],$Vb=[1,55],$Vc=[1,56],$Vd=[1,57],$Ve=[1,48],$Vf=[1,49],$Vg=[1,78],$Vh=[1,79],$Vi=[1,80],$Vj=[1,81],$Vk=[1,82],$Vl=[1,83],$Vm=[1,84],$Vn=[1,85],$Vo=[1,86],$Vp=[1,87],$Vq=[1,88],$Vr=[1,89],$Vs=[1,90],$Vt=[1,91],$Vu=[1,92],$Vv=[6,7,19,37,45,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75],$Vw=[19,37],$Vx=[6,7,19,37,45,60,61,65,67,68,69,70,71,72,73,74,75],$Vy=[6,7,19,37,45,60,61,62,63,65,67,68,69,70,71,72,73,74,75],$Vz=[6,7,19,37,45,67,68,69,70,71,72,73,74,75],$VA=[6,7,19,37,45,73,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"saltos":4,"sentenciasFuncion":5,"SALTO":6,"EOF":7,"identadorRecu":8,"comodinIdentado":9,"IDENTADOR":10,"variables":11,"tipo":12,"items_coma":13,"comodinItems":14,"items":15,"IDD":16,"IGUAL":17,"asignacion":18,"COMA":19,"DOUBLE":20,"INT":21,"BOOLEAN":22,"CHAR":23,"STRING":24,"asignVar":25,"operation":26,"retornoFuntion":27,"RETURN":28,"sentenciaFn":29,"defSi":30,"defMientras":31,"defPara":32,"defMostrar":33,"defSino":34,"llamadaFun":35,"PARENTESISA":36,"PARENTESISC":37,"parametrosLlamada":38,"llamadaFunOP":39,"comoidnOP":40,"SI":41,"DOPUNTO":42,"SINO":43,"PARA":44,"PUNTOCOMA":45,"incremDecrem":46,"MASMAS":47,"MENOSMENOS":48,"MIENTRAS":49,"MOSTRAR":50,"parametroMostrar":51,"stringOidd":52,"terminalsOP":53,"TRUE":54,"FALSE":55,"DECIMAL":56,"ENTERO":57,"CARACTER":58,"CADENA":59,"MAS":60,"MENOS":61,"POR":62,"DIVISION":63,"ELEVADO":64,"MOD":65,"NEGADO":66,"EQUALS":67,"NOEQUALS":68,"MENORQ":69,"MAYORQ":70,"MENOROI":71,"MAYOROI":72,"OR":73,"AND":74,"XOR":75,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SALTO",7:"EOF",10:"IDENTADOR",16:"IDD",17:"IGUAL",19:"COMA",20:"DOUBLE",21:"INT",22:"BOOLEAN",23:"CHAR",24:"STRING",28:"RETURN",36:"PARENTESISA",37:"PARENTESISC",41:"SI",42:"DOPUNTO",43:"SINO",44:"PARA",45:"PUNTOCOMA",47:"MASMAS",48:"MENOSMENOS",49:"MIENTRAS",50:"MOSTRAR",54:"TRUE",55:"FALSE",56:"DECIMAL",57:"ENTERO",58:"CARACTER",59:"CADENA",60:"MAS",61:"MENOS",62:"POR",63:"DIVISION",64:"ELEVADO",65:"MOD",66:"NEGADO",67:"EQUALS",68:"NOEQUALS",69:"MENORQ",70:"MAYORQ",71:"MENOROI",72:"MAYOROI",73:"OR",74:"AND",75:"XOR"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,1],[8,2],[8,1],[9,1],[11,2],[13,2],[14,1],[15,2],[15,2],[15,1],[12,1],[12,1],[12,1],[12,1],[12,1],[25,3],[18,2],[27,3],[27,2],[5,2],[5,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[35,4],[35,5],[39,3],[39,4],[38,3],[38,1],[40,1],[30,6],[34,3],[32,13],[46,1],[46,1],[31,6],[33,5],[51,3],[51,1],[52,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 8:
Parser.yy.fun.scope++
break;
case 9:
Parser.yy.fun.actulizarValorDeclara()
break;
case 11:
Parser.yy.fun.capturarIdentificadores($$[$0]) 
break;
case 15:
tipoAux = Parser.yy.tipoVar.DOUBLE
break;
case 16:
tipoAux = Parser.yy.tipoVar.INT
break;
case 17:
tipoAux = Parser.yy.tipoVar.BOOLEAN
break;
case 18:
tipoAux = Parser.yy.tipoVar.CHAR
break;
case 19:
tipoAux = Parser.yy.tipoVar.STRING
break;
case 20:
Parser.yy.fun.capturarIdentificadores($$[$0-2]); Parser.yy.fun.actulizarValorAsig(Parser.yy.table)
break;
case 21:
Parser.yy.fun.contenidVar = $$[$0-1]
break;
case 22:
Parser.yy.fun.capturarRetorno($$[$0-1])
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33:
Parser.yy.fun.scope = 1
break;
case 34:
Parser.yy.fun.scope = 1; Parser.yy.table.valoFuncion($$[$0]+"", false, Parser.yy.fun.realizar())
break;
case 35: case 38:
this.$ = $$[$0-3]
break;
case 36:
this.$ = $$[$0-4]
break;
case 37:
this.$ = $$[$0-2]
break;
case 41:
Parser.yy.table.capturarParametros($$[$0])
break;
case 42:
Parser.yy.fun.capturarValorSi($$[$0-3])
break;
case 43:
Parser.yy.fun.capturarValorSino()
break;
case 48:
Parser.yy.fun.realizarMostrar()
break;
case 51:
 Parser.yy.fun.capturarItems($$[$0])
break;
case 52:
this.$ = true; 
break;
case 53:
this.$ = false; 
break;
case 54: case 55:
this.$ = Number(yytext); 
break;
case 56: case 57:
this.$ = yytext; 
break;
case 58:
this.$ = Parser.yy.table.contenidoVariableIstr($$[$0]+"", Parser.yy.fun);
break;
case 59:
this.$ = Parser.yy.table.valoFuncion($$[$0]+"",true, Parser.yy.fun.realizar())
break;
case 60:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0]); 
break;
case 61:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 62:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 63:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 64:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 65:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 66:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 67:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 68:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 69:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 70:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 71:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 72:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 73:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 74:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 75:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 76:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 77:
this.$ = $$[$0-1]
break;
case 78:
this.$ = $$[$0]
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:$V1,8:7,9:8,10:$V2,29:6},{1:[3]},{5:10,8:7,9:8,10:$V2,29:6},{1:[2,2]},o($V3,[2,4],{4:11,6:$V0,7:$V1}),o($V3,[2,5]),{1:[2,25],5:12,8:7,9:8,10:$V2,29:6},{11:13,12:22,16:[1,23],20:[1,30],21:[1,31],22:[1,32],23:[1,33],24:[1,34],25:14,27:20,28:[1,29],30:15,31:16,32:17,33:18,34:19,35:21,41:[1,24],43:[1,28],44:[1,26],49:[1,25],50:[1,27]},o($V4,[2,7],{9:8,8:35,10:$V2}),o([10,16,20,21,22,23,24,28,41,43,44,49,50],[2,8]),{1:[2,1]},o($V3,[2,3]),{1:[2,24]},o($V3,[2,26]),o($V3,[2,27]),o($V3,[2,28]),o($V3,[2,29]),o($V3,[2,30]),o($V3,[2,31]),o($V3,[2,32]),o($V3,[2,33]),o($V3,[2,34]),{13:36,14:37,16:$V5},{17:[1,39],36:[1,40]},{36:[1,41]},{36:[1,42]},{36:[1,43]},{36:[1,44]},{42:[1,45]},{4:47,6:$V0,7:$V1,16:$V6,26:46,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:[2,15]},{16:[2,16]},{16:[2,17]},{16:[2,18]},{16:[2,19]},o($V4,[2,6]),o($V3,[2,9]),{4:63,6:$V0,7:$V1,15:60,17:[1,61],19:[1,62]},o([6,7,17,19],[2,11]),{16:$V6,18:64,26:65,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:69,36:$V7,37:[1,66],38:67,39:59,40:68,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:70,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:71,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{21:[1,72]},{16:$V6,26:75,36:$V7,39:59,51:73,52:74,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{4:76,6:$V0,7:$V1},{4:77,6:$V0,7:$V1,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},o($V3,[2,23]),{16:$V6,26:93,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:94,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:95,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},o($Vv,[2,78]),o($Vv,[2,52]),o($Vv,[2,53]),o($Vv,[2,54]),o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),o($Vv,[2,58],{36:[1,96]}),o($Vv,[2,59]),o($V3,[2,10]),{16:$V6,18:97,26:65,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{13:98,14:37,16:$V5},o($V3,[2,14]),o($V3,[2,20]),{4:99,6:$V0,7:$V1,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{4:100,6:$V0,7:$V1},{37:[1,101]},{19:[1,102],37:[2,40]},o($Vw,[2,41],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),{37:[1,103],60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{37:[1,104],60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{16:[1,105]},{37:[1,106]},{19:[1,107],37:[2,50]},o($Vw,[2,51],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu}),o($V3,[2,43]),o($V3,[2,22]),{16:$V6,26:108,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:109,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:110,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:111,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:112,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:113,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:114,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:115,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:116,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:117,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:118,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:119,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:120,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:121,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{16:$V6,26:122,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},o($Vv,[2,66]),o($Vv,[2,67]),{37:[1,123],60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{16:$V6,26:69,36:$V7,37:[1,124],38:125,39:59,40:68,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},o($V3,[2,12]),o($V3,[2,13]),o($V3,[2,21]),o($V3,[2,35]),{4:126,6:$V0,7:$V1},{16:$V6,26:69,36:$V7,38:127,39:59,40:68,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{42:[1,128]},{42:[1,129]},{17:[1,130]},{4:131,6:$V0,7:$V1},{16:$V6,26:75,36:$V7,39:59,51:132,52:74,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},o($Vx,[2,60],{62:$Vi,63:$Vj,64:$Vk}),o($Vx,[2,61],{62:$Vi,63:$Vj,64:$Vk}),o($Vy,[2,62],{64:$Vk}),o($Vy,[2,63],{64:$Vk}),o($Vv,[2,64]),o($Vx,[2,65],{62:$Vi,63:$Vj,64:$Vk}),o($Vz,[2,68],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($Vz,[2,69],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($Vz,[2,70],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($Vz,[2,71],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($Vz,[2,72],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($Vz,[2,73],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl}),o($VA,[2,74],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr}),o($VA,[2,75],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr}),o($VA,[2,76],{60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr}),o($Vv,[2,77]),o($Vv,[2,37]),{37:[1,133]},o($V3,[2,36]),{37:[2,39]},{4:134,6:$V0,7:$V1},{4:135,6:$V0,7:$V1},{16:$V6,26:136,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},o($V3,[2,48]),{37:[2,49]},o($Vv,[2,38]),o($V3,[2,42]),o($V3,[2,47]),{45:[1,137],60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{16:$V6,26:138,36:$V7,39:59,53:51,54:$V8,55:$V9,56:$Va,57:$Vb,58:$Vc,59:$Vd,61:$Ve,66:$Vf},{45:[1,139],60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu},{46:140,47:[1,141],48:[1,142]},{37:[1,143]},{37:[2,45]},{37:[2,46]},{42:[1,144]},{4:145,6:$V0,7:$V1},o($V3,[2,44])],
defaultActions: {3:[2,2],10:[2,1],12:[2,24],30:[2,15],31:[2,16],32:[2,17],33:[2,18],34:[2,19],127:[2,39],132:[2,49],141:[2,45],142:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
let operationCondicion = ""
let capturarOperadors = false
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una linea*/
break;
case 1:/*comentrio multilinea xd*/    
break;
case 2: return 10
break;
case 3: return 6
break;
case 4: /*ignoramos */  
break;
case 5: return 'IMPORT'
break;
case 6: return 'PUNTO'
break;
case 7: return 'EXTENSIONCLR'
break;
case 8: return 'INSERTEZA'
break;
case 9: return 54
break;
case 10:  return 55
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 59; 
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 58; 
break;
case 13:return 20
break;
case 14:return 22
break;
case 15: return 21
break;
case 16:return 24
break;
case 17:return 23
break;
case 18:return 'VOID'
break;
case 19:return 68
break;
case 20:return 71
break;
case 21:return 72
break;
case 22:return 67
break;
case 23:return 17
break;
case 24:return 66
break;
case 25:return 69
break;
case 26:return 70
break;
case 27:return 'SIGINSERTEZA'
break;
case 28:return 75
break;
case 29:return 74
break;
case 30:return 73
break;
case 31:return 28
break;
case 32:return 'PRINCIPAL'
break;
case 33:return 43
break;
case 34:return 41
break;
case 35:return 47
break;
case 36:return 48
break;
case 37:return 44
break;
case 38:return 49
break;
case 39:return 'DETENER'
break;
case 40:return 'CONTINUAR'
break;
case 41:return 50
break;
case 42:return 'LLAVEA'
break;
case 43:return 'LLAVEC'
break;
case 44:return 'DIBUJARAST'
break;
case 45:return 'DIBUJAREXP'
break;
case 46:return 'DIBUJARTS'
break;
case 47:return 56
break;
case 48:return 16
break;
case 49:return 57
break;
case 50:return 42
break;
case 51:return 45
break;
case 52:return 19
break;
case 53:return 62
break;
case 54:return 63
break;
case 55:return 61
break;
case 56:return 60
break;
case 57:return 64
break;
case 58:return 65
break;
case 59:return 36
break;
case 60:return 37
break;
case 61:  return 7
break;
case 62://manejo de errores lexicos
break;
}
},
rules: [/^(?:!!.*)/,/^(?:'''(.|\f|\n|\r|\s|\t)*''')/,/^(?:[\t])/,/^(?:[\n])/,/^(?:[\r|\s|\f]+)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:crl\b)/,/^(?:Incerteza\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:\|&)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Sino\b)/,/^(?:Si\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserInstru;
exports.Parser = parserInstru.Parser;
exports.parse = function () { return parserInstru.parse.apply(parserInstru, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}