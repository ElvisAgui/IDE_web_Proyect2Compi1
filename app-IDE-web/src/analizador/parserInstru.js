/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserInstru = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,10],$V3=[1,12],$V4=[1,2,10],$V5=[2,43],$V6=[1,2,10,41],$V7=[2,16,20,21,22,23,24,28,45,47,48,53,54,57,58,59,60,85],$V8=[1,51],$V9=[1,72],$Va=[1,64],$Vb=[1,66],$Vc=[1,67],$Vd=[1,68],$Ve=[1,69],$Vf=[1,70],$Vg=[1,71],$Vh=[1,62],$Vi=[1,63],$Vj=[1,86],$Vk=[1,90],$Vl=[1,97],$Vm=[1,101],$Vn=[1,102],$Vo=[1,103],$Vp=[1,104],$Vq=[1,105],$Vr=[1,106],$Vs=[1,107],$Vt=[1,108],$Vu=[1,109],$Vv=[1,110],$Vw=[1,111],$Vx=[1,112],$Vy=[1,113],$Vz=[1,114],$VA=[1,115],$VB=[1,116],$VC=[6,7,19,41,49,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84],$VD=[1,131],$VE=[1,124],$VF=[1,127],$VG=[1,128],$VH=[1,125],$VI=[1,126],$VJ=[1,129],$VK=[1,130],$VL=[1,122],$VM=[1,123],$VN=[19,41],$VO=[1,169],$VP=[1,170],$VQ=[1,171],$VR=[1,172],$VS=[1,173],$VT=[1,174],$VU=[1,175],$VV=[1,176],$VW=[1,177],$VX=[1,178],$VY=[1,179],$VZ=[1,180],$V_=[1,181],$V$=[1,182],$V01=[1,183],$V11=[41,68,69,70,71,72,73,75,77,78,79,80,81,82,83,84],$V21=[6,7,19,41,49,68,69,73,75,76,77,78,79,80,81,82,83,84],$V31=[6,7,19,41,49,68,69,70,71,73,75,76,77,78,79,80,81,82,83,84],$V41=[6,7,19,41,49,75,76,77,78,79,80,81,82,83,84],$V51=[6,7,19,41,49,82,83,84],$V61=[41,68,69,73,75,77,78,79,80,81,82,83,84],$V71=[41,68,69,70,71,73,75,77,78,79,80,81,82,83,84],$V81=[41,75,77,78,79,80,81,82,83,84],$V91=[41,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"saltos":4,"sentenciasFuncion":5,"SALTO":6,"EOF":7,"identadorRecu":8,"comodinIdentado":9,"IDENTADOR":10,"variables":11,"tipo":12,"items_coma":13,"comodinItems":14,"items":15,"IDD":16,"IGUAL":17,"asignacion":18,"COMA":19,"DOUBLE":20,"INT":21,"BOOLEAN":22,"CHAR":23,"STRING":24,"asignVar":25,"operation":26,"retornoFuntion":27,"RETURN":28,"sentenciaFn":29,"defSi":30,"defMientras":31,"defPara":32,"defMostrar":33,"defSino":34,"llamadaFun":35,"graficando":36,"escapes":37,"graficandoATS":38,"graficandoTS":39,"PARENTESISA":40,"PARENTESISC":41,"parametrosLlamada":42,"llamadaFunOP":43,"comoidnOP":44,"SI":45,"DOPUNTO":46,"SINO":47,"PARA":48,"PUNTOCOMA":49,"incremDecrem":50,"MASMAS":51,"MENOSMENOS":52,"MIENTRAS":53,"MOSTRAR":54,"parametroMostrar":55,"stringOidd":56,"DETENER":57,"CONTINUAR":58,"DIBUJARAST":59,"DibujarTS":60,"terminalsOP":61,"TRUE":62,"FALSE":63,"DECIMAL":64,"ENTERO":65,"CARACTER":66,"CADENA":67,"MAS":68,"MENOS":69,"POR":70,"DIVISION":71,"ELEVADO":72,"MOD":73,"NEGADO":74,"EQUALS":75,"NOEQUALS":76,"MENORQ":77,"MAYORQ":78,"MENOROI":79,"MAYOROI":80,"SIGINSERTEZA":81,"OR":82,"AND":83,"XOR":84,"DIBUJAREXP":85,"operationGrafica":86,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SALTO",7:"EOF",10:"IDENTADOR",16:"IDD",17:"IGUAL",19:"COMA",20:"DOUBLE",21:"INT",22:"BOOLEAN",23:"CHAR",24:"STRING",28:"RETURN",40:"PARENTESISA",41:"PARENTESISC",45:"SI",46:"DOPUNTO",47:"SINO",48:"PARA",49:"PUNTOCOMA",51:"MASMAS",52:"MENOSMENOS",53:"MIENTRAS",54:"MOSTRAR",57:"DETENER",58:"CONTINUAR",59:"DIBUJARAST",60:"DibujarTS",62:"TRUE",63:"FALSE",64:"DECIMAL",65:"ENTERO",66:"CARACTER",67:"CADENA",68:"MAS",69:"MENOS",70:"POR",71:"DIVISION",72:"ELEVADO",73:"MOD",74:"NEGADO",75:"EQUALS",76:"NOEQUALS",77:"MENORQ",78:"MAYORQ",79:"MENOROI",80:"MAYOROI",81:"SIGINSERTEZA",82:"OR",83:"AND",84:"XOR",85:"DIBUJAREXP"},
productions_: [0,[3,2],[3,1],[3,2],[4,2],[4,1],[4,1],[8,2],[8,1],[9,1],[11,2],[11,2],[13,2],[14,1],[15,2],[15,2],[15,1],[15,2],[12,1],[12,1],[12,1],[12,1],[12,1],[25,3],[18,2],[18,2],[27,3],[27,2],[5,2],[5,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,1],[35,4],[35,5],[35,1],[43,3],[43,4],[42,3],[42,1],[42,2],[44,1],[30,6],[34,3],[32,13],[50,1],[50,1],[31,6],[33,5],[55,3],[55,1],[55,2],[56,1],[37,2],[37,2],[38,5],[39,4],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[36,5],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,2],[86,2],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
Parser.yy.fun.scope++
break;
case 10:
Parser.yy.fun.actulizarValorDeclara()
break;
case 13:
Parser.yy.fun.capturarIdentificadores($$[$0]) 
break;
case 18:
tipoAux = Parser.yy.tipoVar.DOUBLE
break;
case 19:
tipoAux = Parser.yy.tipoVar.INT
break;
case 20:
tipoAux = Parser.yy.tipoVar.BOOLEAN
break;
case 21:
tipoAux = Parser.yy.tipoVar.CHAR
break;
case 22:
tipoAux = Parser.yy.tipoVar.STRING
break;
case 23:
Parser.yy.fun.capturarIdentificadores($$[$0-2]); Parser.yy.fun.actulizarValorAsig(Parser.yy.table)
break;
case 24:
Parser.yy.fun.contenidVar = $$[$0-1]
break;
case 26:
Parser.yy.fun.capturarRetorno($$[$0-1])
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:
Parser.yy.fun.scope = 0
break;
case 38:
Parser.yy.table.valoFuncion($$[$0]+"", false, Parser.yy.fun.realizar()); Parser.yy.fun.scope = 0;
break;
case 39:
Parser.yy.fun.scope = 0; 
break;
case 40:
 Parser.yy.fun.scope = 0
break;
case 41:
Parser.yy.fun.scope = 0 
break;
case 44: case 48:
this.$ = $$[$0-3]
break;
case 45:
this.$ = $$[$0-4]
break;
case 47:
this.$ = $$[$0-2]
break;
case 52:
Parser.yy.table.capturarParametros($$[$0])
break;
case 53:
Parser.yy.fun.capturarValorSi($$[$0-3])
break;
case 54:
Parser.yy.fun.capturarValorSino()
break;
case 59:
Parser.yy.fun.realizarMostrar(Parser.yy.table)
break;
case 63:
 Parser.yy.fun.capturarItems($$[$0])
break;
case 68:
this.$ = true; 
break;
case 69:
this.$ = false; 
break;
case 70: case 71:
this.$ = Number(yytext); 
break;
case 72: case 73:
this.$ = yytext; 
break;
case 74:
this.$ = Parser.yy.table.contenidoVariableIstr($$[$0]+"", Parser.yy.fun);
break;
case 75:
this.$ = Parser.yy.table.valoFuncion($$[$0]+"",true, Parser.yy.fun.realizar())
break;
case 76:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0]); 
break;
case 77:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 78:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 79:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 80:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 81:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 82:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 83:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 84:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 85:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 86:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 87:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 88:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 89:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 90:
this.$ = Parser.yy.opRelatins.comparacionIncerteza($$[$0-2],$$[$0],Parser.yy.fun)
break;
case 91:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 92:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 93:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 94: case 114:
this.$ = $$[$0-1]
break;
case 95:
this.$ = $$[$0]
break;
case 96:
Parser.yy.fun.agregarNodoArbol(Parser.yy.arbol, $$[$0-2])
break;
case 97: case 101:
this.$ = new Parser.yy.nodo("+","Aritm",[$$[$0-2],$$[$0]]);
break;
case 98:
this.$ = new Parser.yy.nodo("-","Aritm",[$$[$0-2],$$[$0]]);
break;
case 99:
this.$ = new Parser.yy.nodo("*","Aritm",[$$[$0-2],$$[$0]]);
break;
case 100:
this.$ = new Parser.yy.nodo("/","Aritm",[$$[$0-2],$$[$0]]); 
break;
case 102:
this.$ = new Parser.yy.nodo("%","MOD",[$$[$0-2],$$[$0]]);
break;
case 103:
this.$ = new Parser.yy.nodo("-","Aritm",[$$[$0-1],$$[$01]]);
break;
case 104:
this.$ = new Parser.yy.nodo("!","Logica",[$$[$0-1],$$[$01]]);
break;
case 105:
this.$ = new Parser.yy.nodo("==","Relacio",[$$[$0-2],$$[$0]]);
break;
case 106:
this.$ = new Parser.yy.nodo("<","Relacio",[$$[$0-2],$$[$0]]);
break;
case 107:
this.$ = new Parser.yy.nodo(">","Relacio",[$$[$0-2],$$[$0]]);
break;
case 108:
this.$ = new Parser.yy.nodo("<=","Relacio",[$$[$0-2],$$[$0]]);
break;
case 109:
this.$ = new Parser.yy.nodo(">=","Relacio",[$$[$0-2],$$[$0]]);
break;
case 110:
this.$ = new Parser.yy.nodo("~","Insert",[$$[$0-2],$$[$0]]);
break;
case 111:
this.$ = new Parser.yy.nodo("||","Logica",[$$[$0-2],$$[$0]]);
break;
case 112:
this.$ = new Parser.yy.nodo("&&","Logica",[$$[$0-2],$$[$0]]);
break;
case 113:
this.$ = new Parser.yy.nodo("|&","Logica",[$$[$0-2],$$[$0]]); 
break;
case 115:
this.$ = new Parser.yy.nodo($$[$0],"Double",[]);
break;
case 116:
this.$ = new Parser.yy.nodo($$[$0],"Number",[]);
break;
case 117:
this.$ = new Parser.yy.nodo("true","Boolean",[]);
break;
case 118:
this.$ = new Parser.yy.nodo("false","Boolean",[]);
break;
case 119:
this.$ = new Parser.yy.nodo($$[$0],"Caracter",[]);
break;
case 120:
this.$ = new Parser.yy.nodo($$[$0],"Cadena",[]);
break;
case 121:
this.$ = new Parser.yy.nodo($$[$0],"Variable",[]);
break;
}
},
table: [{2:[1,4],3:1,4:2,5:3,6:$V0,7:$V1,8:8,9:9,10:$V2,29:7},{1:[3]},{2:$V3,5:11,8:8,9:9,10:$V2,29:7},{1:[2,2]},o($V4,$V5,{4:13,6:$V0,7:$V1}),o($V6,[2,5],{4:14,6:$V0,7:$V1}),o($V6,[2,6]),{1:[2,29],2:$V3,5:15,8:8,9:9,10:$V2,29:7},{2:[1,30],11:16,12:29,16:[1,31],20:[1,43],21:[1,44],22:[1,45],23:[1,46],24:[1,47],25:17,27:23,28:[1,37],30:18,31:19,32:20,33:21,34:22,35:24,36:25,37:26,38:27,39:28,45:[1,32],47:[1,36],48:[1,34],53:[1,33],54:[1,35],57:[1,39],58:[1,40],59:[1,41],60:[1,42],85:[1,38]},o($V7,[2,8],{9:9,8:48,10:$V2}),o([2,10,16,20,21,22,23,24,28,45,47,48,53,54,57,58,59,60,85],[2,9]),{1:[2,1]},o($V4,$V5),{1:[2,3]},o($V6,[2,4]),{1:[2,28]},o($V4,[2,30]),o($V4,[2,31]),o($V4,[2,32]),o($V4,[2,33]),o($V4,[2,34]),o($V4,[2,35]),o($V4,[2,36]),o($V4,[2,37]),o($V4,[2,38]),o($V4,[2,39]),o($V4,[2,40]),o($V4,[2,41]),o($V4,[2,42]),{13:49,14:50,16:$V8},o($V4,[2,46],{4:52,6:$V0,7:$V1}),{17:[1,53],40:[1,54]},{40:[1,55]},{40:[1,56]},{40:[1,57]},{40:[1,58]},{46:[1,59]},{4:61,6:$V0,7:$V1,16:$V9,26:60,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{40:[1,74]},{4:75,6:$V0,7:$V1},{4:76,6:$V0,7:$V1},{40:[1,77]},{40:[1,78]},{16:[2,18]},{16:[2,19]},{16:[2,20]},{16:[2,21]},{16:[2,22]},o($V7,[2,7]),o($V4,[2,10]),{2:[1,83],4:82,6:$V0,7:$V1,15:79,17:[1,80],19:[1,81]},o([2,6,7,17,19],[2,13]),o($V4,[2,11]),{2:$Vj,16:$V9,18:84,26:85,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{2:$Vk,16:$V9,26:91,40:$Va,41:[1,87],42:88,43:73,44:89,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:92,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:93,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{21:[1,94]},{2:$Vl,16:$V9,26:98,40:$Va,43:73,55:95,56:96,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{4:99,6:$V0,7:$V1},{4:100,6:$V0,7:$V1,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},o($V4,[2,27]),{16:$V9,26:117,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:118,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:119,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},o($VC,[2,95]),o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($VC,[2,74],{40:[1,120]}),o($VC,[2,75]),{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:121},o($V4,[2,64]),o($V4,[2,65]),{16:[1,132]},{41:[1,133]},o($V4,[2,12]),{2:$Vj,16:$V9,18:134,26:85,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{13:135,14:50,16:$V8},o($V4,[2,16]),{4:136,6:$V0,7:$V1},o($V4,[2,23]),{4:137,6:$V0,7:$V1,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{4:138,6:$V0,7:$V1},{4:139,6:$V0,7:$V1},{41:[1,140]},{19:[1,141],41:[2,50]},{4:142,6:$V0,7:$V1},o($VN,[2,52],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),{41:[1,143],68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{41:[1,144],68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{16:[1,145]},{41:[1,146]},{19:[1,147],41:[2,61]},{4:148,6:$V0,7:$V1},o($VN,[2,63],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB}),o($V4,[2,54]),o($V4,[2,26]),{16:$V9,26:149,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:150,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:151,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:152,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:153,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:154,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:155,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:156,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:157,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:158,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:159,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:160,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:161,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:162,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:163,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{16:$V9,26:164,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},o($VC,[2,82]),o($VC,[2,83]),{41:[1,165],68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{2:$Vk,16:$V9,26:91,40:$Va,41:[1,166],42:167,43:73,44:89,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{41:[1,168],68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,75:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:184},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:185},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:186},o($V11,[2,115]),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),o($V11,[2,119]),o($V11,[2,120]),o($V11,[2,121]),{41:[1,187]},{4:188,6:$V0,7:$V1},o($V4,[2,14]),o($V4,[2,15]),o($V4,[2,17]),o($V4,[2,24]),o($V4,[2,25]),o($V4,[2,44]),{4:189,6:$V0,7:$V1},{2:$Vk,16:$V9,26:91,40:$Va,42:190,43:73,44:89,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{41:[2,51]},{46:[1,191]},{46:[1,192]},{17:[1,193]},{4:194,6:$V0,7:$V1},{2:$Vl,16:$V9,26:98,40:$Va,43:73,55:195,56:96,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{41:[2,62]},o($V21,[2,76],{70:$Vo,71:$Vp,72:$Vq}),o($V21,[2,77],{70:$Vo,71:$Vp,72:$Vq}),o($V31,[2,78],{72:$Vq}),o($V31,[2,79],{72:$Vq}),o($VC,[2,80]),o($V21,[2,81],{70:$Vo,71:$Vp,72:$Vq}),o($V41,[2,84],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,85],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,86],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,87],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,88],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,89],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V41,[2,90],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr}),o($V51,[2,91],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy}),o($V51,[2,92],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy}),o($V51,[2,93],{68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy}),o($VC,[2,94]),o($VC,[2,47]),{41:[1,196]},{4:197,6:$V0,7:$V1},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:198},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:199},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:200},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:201},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:202},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:203},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:204},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:205},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:206},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:207},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:208},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:209},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:210},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:211},{16:$VD,40:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,69:$VL,74:$VM,86:212},o($V11,[2,103]),o($V11,[2,104]),{41:[1,213],68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,75:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ,82:$V_,83:$V$,84:$V01},{4:214,6:$V0,7:$V1},o($V4,[2,67]),o($V4,[2,45]),{41:[2,49]},{4:215,6:$V0,7:$V1},{4:216,6:$V0,7:$V1},{16:$V9,26:217,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},o($V4,[2,59]),{41:[2,60]},o($VC,[2,48]),o($V4,[2,96]),o($V61,[2,97],{70:$VQ,71:$VR,72:$VS}),o($V61,[2,98],{70:$VQ,71:$VR,72:$VS}),o($V71,[2,99],{72:$VS}),o($V71,[2,100],{72:$VS}),o($V11,[2,101]),o($V61,[2,102],{70:$VQ,71:$VR,72:$VS}),o($V81,[2,105],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V81,[2,106],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V81,[2,107],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V81,[2,108],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V81,[2,109],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V81,[2,110],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V91,[2,111],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,75:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ}),o($V91,[2,112],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,75:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ}),o($V91,[2,113],{68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,75:$VU,77:$VV,78:$VW,79:$VX,80:$VY,81:$VZ}),o($V11,[2,114]),o($V4,[2,66]),o($V4,[2,53]),o($V4,[2,58]),{49:[1,218],68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{16:$V9,26:219,40:$Va,43:73,61:65,62:$Vb,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg,69:$Vh,74:$Vi},{49:[1,220],68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB},{50:221,51:[1,222],52:[1,223]},{41:[1,224]},{41:[2,56]},{41:[2,57]},{46:[1,225]},{4:226,6:$V0,7:$V1},o($V4,[2,55])],
defaultActions: {3:[2,2],11:[2,1],13:[2,3],15:[2,28],43:[2,18],44:[2,19],45:[2,20],46:[2,21],47:[2,22],142:[2,51],148:[2,62],190:[2,49],195:[2,60],222:[2,56],223:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
let operationCondicion = ""
let capturarOperadors = false
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una linea*/
break;
case 1:/*comentrio multilinea xd*/    
break;
case 2: return 10
break;
case 3: return 6
break;
case 4: /*ignoramos */  
break;
case 5: return 'IMPORT'
break;
case 6: return 'PUNTO'
break;
case 7: return 'EXTENSIONCLR'
break;
case 8: return 'INSERTEZA'
break;
case 9: return 62
break;
case 10:  return 63
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 67; 
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 66; 
break;
case 13:return 20
break;
case 14:return 22
break;
case 15: return 21
break;
case 16:return 24
break;
case 17:return 23
break;
case 18:return 'VOID'
break;
case 19:return 76
break;
case 20:return 79
break;
case 21:return 80
break;
case 22:return 75
break;
case 23:return 17
break;
case 24:return 74
break;
case 25:return 77
break;
case 26:return 78
break;
case 27:return 81
break;
case 28:return 84
break;
case 29:return 83
break;
case 30:return 82
break;
case 31:return 28
break;
case 32:return 'PRINCIPAL'
break;
case 33:return 47
break;
case 34:return 45
break;
case 35:return 51
break;
case 36:return 52
break;
case 37:return 48
break;
case 38:return 53
break;
case 39:return 57
break;
case 40:return 58
break;
case 41:return 54
break;
case 42:return 'LLAVEA'
break;
case 43:return 'LLAVEC'
break;
case 44:return 59
break;
case 45:return 85
break;
case 46:return 'DIBUJARTS'
break;
case 47:return 64
break;
case 48:return 16
break;
case 49:return 65
break;
case 50:return 46
break;
case 51:return 49
break;
case 52:return 19
break;
case 53:return 70
break;
case 54:return 71
break;
case 55:return 69
break;
case 56:return 68
break;
case 57:return 72
break;
case 58:return 73
break;
case 59:return 40
break;
case 60:return 41
break;
case 61:  return 7
break;
case 62://manejo de errores lexicos
break;
}
},
rules: [/^(?:!!.*)/,/^(?:'''(.|\f|\n|\r|\s|\t)*''')/,/^(?:[\t])/,/^(?:[\n])/,/^(?:\s+)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:crl\b)/,/^(?:Incerteza\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:\|&)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Sino\b)/,/^(?:Si\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserInstru;
exports.Parser = parserInstru.Parser;
exports.parse = function () { return parserInstru.parse.apply(parserInstru, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}