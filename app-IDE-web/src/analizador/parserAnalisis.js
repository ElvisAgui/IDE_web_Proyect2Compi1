/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserAnalisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7,21,22,23,24,25,53],$V1=[2,3],$V2=[1,3],$V3=[2,57],$V4=[1,12],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,15],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,46],$Vf=[1,6,7,21,22,23,24,25,48,53],$Vg=[1,60],$Vh=[1,52],$Vi=[1,59],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,50],$Vp=[1,51],$Vq=[1,7,21,22,23,24,25,48,53],$Vr=[11,12,18,20],$Vs=[2,9],$Vt=[7,21,22,23,24,25,37,59,60,61,66,67],$Vu=[1,96],$Vv=[1,97],$Vw=[1,98],$Vx=[1,99],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,105],$VE=[1,106],$VF=[1,107],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[11,12,20,32,62,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92],$VK=[21,22,23,24,25,32],$VL=[1,117],$VM=[11,12],$VN=[20,32],$VO=[11,12,20,32,62,77,78,82,84,85,86,87,88,89,90,91,92],$VP=[11,12,20,32,62,77,78,79,80,82,84,85,86,87,88,89,90,91,92],$VQ=[11,12,20,32,62,84,85,86,87,88,89,90,91,92],$VR=[11,12,20,32,62,90,91,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"importacion":4,"sentenciasGlobales":5,"IMPORT":6,"IDD":7,"PUNTO":8,"EXTENSIONCLR":9,"saltos":10,"SALTO":11,"EOF":12,"variables":13,"tipo":14,"items_coma":15,"comodinItems":16,"items":17,"IGUAL":18,"asignacion":19,"COMA":20,"DOUBLE":21,"INT":22,"BOOLEAN":23,"CHAR":24,"STRING":25,"asignVar":26,"operation":27,"funtions":28,"comodinIDFun":29,"sentenciasFuncion":30,"comss":31,"PARENTESISC":32,"DOPUNTO":33,"parametros":34,"PARENTESISA":35,"retornoFuntion":36,"RETURN":37,"param":38,"sentenciaFn":39,"identadorRecu":40,"defSi":41,"defMientras":42,"defPara":43,"defMostrar":44,"defSino":45,"llamadaFun":46,"comodinIdentado":47,"IDENTADOR":48,"metod":49,"comodinVerificador":50,"sentenciasMetod":51,"comodinMetod":52,"VOID":53,"funPrincipal":54,"PRINCIPAL":55,"parametrosLlamada":56,"llamadaFunOP":57,"sentenciaGlobales":58,"SI":59,"SINO":60,"PARA":61,"PUNTOCOMA":62,"incremDecrem":63,"MASMAS":64,"MENOSMENOS":65,"MIENTRAS":66,"MOSTRAR":67,"parametroMostrar":68,"stringOidd":69,"CADENA":70,"terminalsOP":71,"TRUE":72,"FALSE":73,"DECIMAL":74,"ENTERO":75,"CARACTER":76,"MAS":77,"MENOS":78,"POR":79,"DIVISION":80,"ELEVADO":81,"MOD":82,"NEGADO":83,"EQUALS":84,"NOEQUALS":85,"MENORQ":86,"MAYORQ":87,"MENOROI":88,"MAYOROI":89,"OR":90,"AND":91,"XOR":92,"$accept":0,"$end":1},
terminals_: {2:"error",6:"IMPORT",7:"IDD",8:"PUNTO",9:"EXTENSIONCLR",11:"SALTO",12:"EOF",18:"IGUAL",20:"COMA",21:"DOUBLE",22:"INT",23:"BOOLEAN",24:"CHAR",25:"STRING",32:"PARENTESISC",33:"DOPUNTO",35:"PARENTESISA",37:"RETURN",48:"IDENTADOR",53:"VOID",55:"PRINCIPAL",59:"SI",60:"SINO",61:"PARA",62:"PUNTOCOMA",64:"MASMAS",65:"MENOSMENOS",66:"MIENTRAS",67:"MOSTRAR",70:"CADENA",72:"TRUE",73:"FALSE",74:"DECIMAL",75:"ENTERO",76:"CARACTER",77:"MAS",78:"MENOS",79:"POR",80:"DIVISION",81:"ELEVADO",82:"MOD",83:"NEGADO",84:"EQUALS",85:"NOEQUALS",86:"MENORQ",87:"MAYORQ",88:"MENOROI",89:"MAYOROI",90:"OR",91:"AND",92:"XOR"},
productions_: [0,[3,2],[4,6],[4,0],[10,2],[10,1],[10,1],[13,2],[15,2],[16,1],[17,2],[17,2],[17,1],[14,1],[14,1],[14,1],[14,1],[14,1],[26,3],[19,2],[28,3],[29,3],[29,4],[31,3],[36,3],[36,2],[34,3],[34,1],[38,2],[30,2],[30,1],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[39,2],[40,2],[40,1],[47,1],[49,4],[50,2],[50,3],[52,3],[51,2],[51,1],[54,7],[46,4],[46,5],[57,3],[57,4],[56,3],[56,1],[5,2],[5,0],[58,1],[58,1],[58,1],[58,1],[58,1],[41,5],[45,1],[43,13],[63,1],[63,1],[42,6],[44,5],[68,3],[68,1],[69,1],[69,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
console.log("encontre una importacion")
break;
case 4:
console.log("encontre un salto de linea")
break;
case 9:
Parser.yy.table.claseTem.capturaItems(yytext)
break;
case 13:
tipoAux = Parser.yy.tipoVar.DOUBLE
break;
case 14:
tipoAux = Parser.yy.tipoVar.INT
break;
case 15:
tipoAux = Parser.yy.tipoVar.BOOLEAN
break;
case 16:
tipoAux = Parser.yy.tipoVar.CHAR
break;
case 17:
tipoAux = Parser.yy.tipoVar.STRING
break;
case 18:
this.$ = $$[$0-2]
break;
case 19:
contenidoVar = $$[$0-1]
break;
case 21: case 22:
Parser.yy.table.verificarFuncion()
break;
case 23:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],tipoAux)
break;
case 28:
Parser.yy.table.claseTem.capturarParametros($$[$0],tipoAux)
break;
case 42:
Parser.yy.table.scope++;
break;
case 44: case 45:
Parser.yy.table.verificarFuncion();
break;
case 46:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],Parser.yy.tipoVar.VOID)
break;
case 59:
Parser.yy.table.asignarValorVarGlobal($$[$0]+"",contenidoVar); contenidoVar = null
break;
case 60:
Parser.yy.table.capturarVariableGlobal(tipoAux,contenidoVar);contenidoVar = null
break;
case 74:
this.$ = true
break;
case 75:
this.$ = false
break;
case 76: case 77:
this.$ = Number(yytext)
break;
case 78: case 79:
this.$ = yytext
break;
case 80:
this.$ = Parser.yy.table.contenidoVariable(yytext+"")
break;
case 82:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0])
break;
case 83:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 84:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 85:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 86:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 87:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 88:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 89:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 90:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 91:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 92:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 93:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 94:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 95:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 96:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 97:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 98:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 99:
this.$ = $$[$0-1]
break;
case 100:
this.$ = $$[$0]
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:$V2}),{1:[3]},{1:$V3,5:4,7:$V4,13:8,14:13,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:7,28:6,29:11,31:16,49:9,50:14,52:22,53:$Va,54:10,58:5},{7:[1,23]},{1:[2,1]},{1:$V3,5:24,7:$V4,13:8,14:13,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:7,28:6,29:11,31:16,49:9,50:14,52:22,53:$Va,54:10,58:5},o($V0,[2,58]),o($V0,[2,59]),o($V0,[2,60]),o($V0,[2,61]),o($V0,[2,62]),{10:25,11:$Vb,12:$Vc},{18:$Vd},{7:[1,30],15:29,16:31},{33:[1,32]},{7:[1,34],55:[1,33]},{14:38,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,32:[1,35],34:36,38:37},{7:[2,13]},{7:[2,14]},{7:[2,15]},{7:[2,16]},{7:[2,17]},{14:38,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,32:[1,39],34:40,38:37},{8:[1,41]},{1:[2,56]},{30:42,39:43,40:44,47:45,48:$Ve},o($Vf,[2,5],{10:47,11:$Vb,12:$Vc}),o($Vf,[2,6]),{7:$Vg,19:48,27:49,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($Vq,[2,7]),o($Vr,$Vs,{35:[1,62]}),{10:66,11:$Vb,12:$Vc,17:63,18:[1,64],20:[1,65]},{10:67,11:$Vb,12:$Vc},{35:[1,68]},{35:[1,69]},{33:[1,70]},{32:[1,71]},{20:[1,72],32:[2,27]},{7:[1,73]},{33:[2,44]},{32:[1,74]},{9:[1,75]},o($V0,[2,20]),o($V0,[2,30],{39:43,40:44,47:45,30:76,48:$Ve}),{7:[1,87],13:77,14:86,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:78,36:84,37:[1,93],41:79,42:80,43:81,44:82,45:83,46:85,59:[1,88],60:[1,92],61:[1,90],66:[1,89],67:[1,91]},o($Vt,[2,41],{47:45,40:94,48:$Ve}),o([7,21,22,23,24,25,37,48,59,60,61,66,67],[2,42]),o($Vf,[2,4]),o($Vq,[2,18]),{10:95,11:$Vb,12:$Vc,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{7:$Vg,27:111,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:112,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:113,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($VJ,[2,100]),o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,79]),o($VJ,[2,80],{35:[1,114]}),o($VJ,[2,81]),o($VK,[2,23]),o($Vq,[2,8]),{7:$Vg,19:115,27:49,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$VL,15:116,16:31},o($Vq,[2,12]),{39:119,40:44,47:45,48:$Ve,51:118},{32:[1,120]},o($VK,[2,46]),o($VM,[2,21]),{33:[1,121]},{14:38,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,34:122,38:37},o($VN,[2,28]),{33:[2,45]},{10:123,11:$Vb,12:$Vc},o($V0,[2,29]),o($Vq,[2,31]),o($Vq,[2,32]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,35]),o($Vq,[2,36]),o($Vq,[2,37]),o($Vq,[2,38]),o($Vq,[2,39]),{7:$VL,15:29,16:31},{18:$Vd,35:[1,124]},{35:[1,125]},{35:[1,126]},{35:[1,127]},{35:[1,128]},o($Vq,[2,64]),{7:$Vg,10:130,11:$Vb,12:$Vc,27:129,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($Vt,[2,40]),o($Vq,[2,19]),{7:$Vg,27:131,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:132,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:133,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:134,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:135,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:136,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:137,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:138,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:139,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:140,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:141,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:142,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:143,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:144,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:145,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($VJ,[2,88]),o($VJ,[2,89]),{32:[1,146],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{7:$Vg,27:149,32:[1,147],35:$Vh,56:148,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($Vq,[2,10]),o($Vq,[2,11]),o($Vr,$Vs),o($V0,[2,43]),o($V0,[2,48],{40:44,47:45,39:119,51:150,48:$Ve}),{33:[1,151]},o($VM,[2,22]),{32:[2,26]},o($V0,$V1,{4:152,6:$V2}),{7:$Vg,27:149,32:[1,153],35:$Vh,56:154,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:155,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{7:$Vg,27:156,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{22:[1,157]},{7:[1,161],68:158,69:159,70:[1,160]},{10:162,11:$Vb,12:$Vc,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},o($Vq,[2,25]),o($VO,[2,82],{79:$Vw,80:$Vx,81:$Vy}),o($VO,[2,83],{79:$Vw,80:$Vx,81:$Vy}),o($VP,[2,84],{81:$Vy}),o($VP,[2,85],{81:$Vy}),o($VJ,[2,86]),o($VO,[2,87],{79:$Vw,80:$Vx,81:$Vy}),o($VQ,[2,90],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VQ,[2,91],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VQ,[2,92],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VQ,[2,93],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VQ,[2,94],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VQ,[2,95],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz}),o($VR,[2,96],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF}),o($VR,[2,97],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF}),o($VR,[2,98],{77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF}),o($VJ,[2,99]),o($VJ,[2,52]),{32:[1,163]},{20:[1,164],32:[2,55],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},o($V0,[2,47]),{10:165,11:$Vb,12:$Vc},o($V0,[2,2]),{10:166,11:$Vb,12:$Vc},{32:[1,167]},{32:[1,168],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{32:[1,169],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{7:[1,170]},{32:[1,171]},{20:[1,172],32:[2,71]},o($VN,[2,72]),o($VN,[2,73]),o($Vq,[2,24]),o($VJ,[2,53]),{7:$Vg,27:149,35:$Vh,56:173,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{30:174,39:43,40:44,47:45,48:$Ve},o($Vq,[2,50]),{10:175,11:$Vb,12:$Vc},{10:176,11:$Vb,12:$Vc},{33:[1,177]},{18:[1,178]},{10:179,11:$Vb,12:$Vc},{7:$Vg,27:149,35:$Vh,56:180,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{32:[2,54]},o($V0,[2,49]),o($Vq,[2,51]),o($Vq,[2,63]),{10:181,11:$Vb,12:$Vc},{7:$Vg,27:182,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},o($Vq,[2,69]),{32:[2,70]},o($Vq,[2,68]),{62:[1,183],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{7:$Vg,27:184,35:$Vh,57:61,70:$Vi,71:53,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,83:$Vp},{62:[1,185],77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI},{63:186,64:[1,187],65:[1,188]},{32:[1,189]},{32:[2,66]},{32:[2,67]},{33:[1,190]},{10:191,11:$Vb,12:$Vc},o($Vq,[2,65])],
defaultActions: {4:[2,1],17:[2,13],18:[2,14],19:[2,15],20:[2,16],21:[2,17],24:[2,56],39:[2,44],74:[2,45],122:[2,26],173:[2,54],180:[2,70],187:[2,66],188:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); console.log("un identador"); return 48
break;
case 1: return 11
break;
case 2:/*ignoramos */  
break;
case 3:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 6
break;
case 4:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 8
break;
case 5:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 9
break;
case 6:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'INSERTEZA'
break;
case 7:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 72
break;
case 8:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 73
break;
case 9: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 70; 
break;
case 10: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 76; 
break;
case 11:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 21
break;
case 12:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 23
break;
case 13:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 22
break;
case 14:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 25
break;
case 15:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 24
break;
case 16:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 53
break;
case 17:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 85
break;
case 18:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 88
break;
case 19:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 89
break;
case 20:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 84
break;
case 21:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 18
break;
case 22:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 83
break;
case 23:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 86
break;
case 24:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 87
break;
case 25:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'SIGINSERTEZA'
break;
case 26:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 91
break;
case 27:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 90
break;
case 28:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 92
break;
case 29:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 37
break;
case 30:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 55
break;
case 31:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 59
break;
case 32:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 60
break;
case 33:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 64
break;
case 34:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 65
break;
case 35:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 61
break;
case 36:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 66
break;
case 37:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DETENER'
break;
case 38:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'CONTINUAR'
break;
case 39:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 67
break;
case 40:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEA'
break;
case 41:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEC'
break;
case 42:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARAST'
break;
case 43:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJAREXP'
break;
case 44:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARTS'
break;
case 45:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 74
break;
case 46:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 7
break;
case 47:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 75
break;
case 48:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 33
break;
case 49:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 62
break;
case 50:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 20
break;
case 51:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 79
break;
case 52:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 80
break;
case 53:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 78
break;
case 54:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 77
break;
case 55:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 81
break;
case 56:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 82
break;
case 57:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 35
break;
case 58:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 32
break;
case 59:  return 12
break;
case 60://manejo de errores lexicos
break;
}
},
rules: [/^(?:[\t])/,/^(?:[\n])/,/^(?:[\r|\s|\f]+)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:clr\b)/,/^(?:Incerteza\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Si\b)/,/^(?:Sino\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserAnalisis;
exports.Parser = parserAnalisis.Parser;
exports.parse = function () { return parserAnalisis.parse.apply(parserAnalisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}