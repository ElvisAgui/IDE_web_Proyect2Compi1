/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parserAnalisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9,22,23,24,25,26,54],$V1=[2,4],$V2=[1,8],$V3=[1,7],$V4=[1,4],$V5=[1,5],$V6=[2,65],$V7=[1,18],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,29],$Ve=[1,2,8,9,22,23,24,25,26,49,54],$Vf=[2,9],$Vg=[1,37],$Vh=[1,41],$Vi=[1,2,8,9,22,23,24,25,26,54],$Vj=[1,57],$Vk=[1,60],$Vl=[1,71],$Vm=[1,63],$Vn=[1,65],$Vo=[1,66],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,70],$Vt=[1,61],$Vu=[1,62],$Vv=[1,9,22,23,24,25,26,49,54],$Vw=[2,12,13,19,21],$Vx=[2,13],$Vy=[9,22,23,24,25,26,38,62,63,64,69,70],$Vz=[1,110],$VA=[1,111],$VB=[1,112],$VC=[1,113],$VD=[1,114],$VE=[1,115],$VF=[1,116],$VG=[1,117],$VH=[1,118],$VI=[1,119],$VJ=[1,120],$VK=[1,121],$VL=[1,122],$VM=[1,123],$VN=[1,124],$VO=[12,13,21,33,65,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95],$VP=[22,23,24,25,26,33],$VQ=[1,132],$VR=[12,13],$VS=[21,33],$VT=[12,13,21,33,65,80,81,85,87,88,89,90,91,92,93,94,95],$VU=[12,13,21,33,65,80,81,82,83,85,87,88,89,90,91,92,93,94,95],$VV=[12,13,21,33,65,87,88,89,90,91,92,93,94,95],$VW=[12,13,21,33,65,93,94,95];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"saltos":4,"importacion":5,"sentenciasGlobales":6,"comodinImpor":7,"IMPORT":8,"IDD":9,"PUNTO":10,"EXTENSIONCLR":11,"SALTO":12,"EOF":13,"variables":14,"tipo":15,"items_coma":16,"comodinItems":17,"items":18,"IGUAL":19,"asignacion":20,"COMA":21,"DOUBLE":22,"INT":23,"BOOLEAN":24,"CHAR":25,"STRING":26,"asignVar":27,"operation":28,"funtions":29,"comodinIDFun":30,"sentenciasFuncion":31,"comss":32,"PARENTESISC":33,"DOPUNTO":34,"parametros":35,"PARENTESISA":36,"retornoFuntion":37,"RETURN":38,"param":39,"sentenciaFn":40,"identadorRecu":41,"defSi":42,"defMientras":43,"defPara":44,"defMostrar":45,"defSino":46,"llamadaFun":47,"comodinIdentado":48,"IDENTADOR":49,"metod":50,"comodinVerificador":51,"sentenciasMetod":52,"comodinMetod":53,"VOID":54,"funPrincipal":55,"comodinFunPrim":56,"PRINCIPAL":57,"parametrosLlamada":58,"llamadaFunOP":59,"comoidnOP":60,"sentenciaGlobales":61,"SI":62,"SINO":63,"PARA":64,"PUNTOCOMA":65,"incremDecrem":66,"MASMAS":67,"MENOSMENOS":68,"MIENTRAS":69,"MOSTRAR":70,"parametroMostrar":71,"stringOidd":72,"terminalsOP":73,"TRUE":74,"FALSE":75,"DECIMAL":76,"ENTERO":77,"CARACTER":78,"CADENA":79,"MAS":80,"MENOS":81,"POR":82,"DIVISION":83,"ELEVADO":84,"MOD":85,"NEGADO":86,"EQUALS":87,"NOEQUALS":88,"MENORQ":89,"MAYORQ":90,"MENOROI":91,"MAYOROI":92,"OR":93,"AND":94,"XOR":95,"$accept":0,"$end":1},
terminals_: {2:"error",8:"IMPORT",9:"IDD",10:"PUNTO",11:"EXTENSIONCLR",12:"SALTO",13:"EOF",19:"IGUAL",21:"COMA",22:"DOUBLE",23:"INT",24:"BOOLEAN",25:"CHAR",26:"STRING",33:"PARENTESISC",34:"DOPUNTO",36:"PARENTESISA",38:"RETURN",49:"IDENTADOR",54:"VOID",57:"PRINCIPAL",62:"SI",63:"SINO",64:"PARA",65:"PUNTOCOMA",67:"MASMAS",68:"MENOSMENOS",69:"MIENTRAS",70:"MOSTRAR",74:"TRUE",75:"FALSE",76:"DECIMAL",77:"ENTERO",78:"CARACTER",79:"CADENA",80:"MAS",81:"MENOS",82:"POR",83:"DIVISION",84:"ELEVADO",85:"MOD",86:"NEGADO",87:"EQUALS",88:"NOEQUALS",89:"MENORQ",90:"MAYORQ",91:"MENOROI",92:"MAYOROI",93:"OR",94:"AND",95:"XOR"},
productions_: [0,[3,3],[3,2],[5,2],[5,0],[7,5],[7,2],[4,2],[4,1],[4,1],[14,2],[16,2],[16,2],[17,1],[18,2],[18,2],[18,1],[18,2],[15,1],[15,1],[15,1],[15,1],[15,1],[27,3],[20,2],[20,2],[29,3],[30,3],[30,4],[32,3],[37,3],[37,2],[35,3],[35,1],[39,2],[31,2],[31,1],[40,2],[40,2],[40,2],[40,2],[40,2],[40,2],[40,2],[40,2],[40,2],[41,2],[41,1],[48,1],[50,4],[51,2],[51,3],[53,3],[52,2],[52,1],[55,3],[56,5],[47,4],[47,5],[59,3],[59,4],[58,3],[58,1],[60,1],[6,2],[6,0],[61,1],[61,1],[61,1],[61,1],[61,1],[42,6],[46,3],[44,13],[66,1],[66,1],[43,6],[45,5],[71,3],[71,1],[72,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
Parser.yy.table.anlizarImport($$[$0-3]+""+$$[$0-2]+""+$$[$0-1])
break;
case 6:
/*capturar errores*/
break;
case 10: case 106:
this.$ = $$[$0-1]
break;
case 13:
Parser.yy.table.claseTem.capturaItems(yytext)
break;
case 18:
tipoAux = Parser.yy.tipoVar.DOUBLE; this.$ = yytext
break;
case 19:
tipoAux = Parser.yy.tipoVar.INT; this.$ = yytext
break;
case 20:
tipoAux = Parser.yy.tipoVar.BOOLEAN; this.$ = yytext
break;
case 21:
tipoAux = Parser.yy.tipoVar.CHAR; this.$ = yytext
break;
case 22:
tipoAux = Parser.yy.tipoVar.STRING; this.$ = yytext
break;
case 23: case 59:
this.$ = $$[$0-2]
break;
case 24:
contenidoVar = $$[$0-1]
break;
case 26: case 49: case 55:
Parser.yy.table.claseTem.capturarInstruccioneFuncion()
break;
case 27: case 28:
Parser.yy.table.verificarFuncion()
break;
case 29:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],tipoAux)
break;
case 30:
Parser.yy.table.verificadorRetorno($$[$0-1])
break;
case 31:
Parser.yy.table.verificarReturnMetod()
break;
case 34:
Parser.yy.table.claseTem.capturarParametros($$[$0],tipoAux)
break;
case 35: case 36:
Parser.yy.table.controlCero()
break;
case 37:
Parser.yy.table.claseTem.capturarVariableFuncion(tipoAux,contenidoVar); contenidoVar = null; Parser.yy.table.scope = 0; Parser.yy.table.verificadorScope(false,false, false,$$[$0])
break;
case 38:
Parser.yy.table.asignarValorVarFunOGlobal($$[$0],contenidoVar); contenidoVar = null; Parser.yy.table.scope = 0; Parser.yy.table.verificadorScope(false,false, false,$$[$0])
break;
case 39:
Parser.yy.table.verificadorScope(true,false, true,"Si"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 40:
Parser.yy.table.verificadorScope(false,false, true,"Mientras"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 41:
Parser.yy.table.verificadorScope(false,false, true,"Para"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 42:
Parser.yy.table.verificadorScope(false,false, false,"Mostrar"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 43:
Parser.yy.table.verificadorScope(false,true, true,"Sino"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 44:
Parser.yy.table.verificadorScope(false,false, false,"Retorno"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 45:
Parser.yy.table.verificadorScope(false,false, false,$$[$0]); Parser.yy.table.valoFuncion($$[$0]+"", false, false); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 48:
Parser.yy.table.scope++; scope++; Parser.yy.table.scopeVerific++;
break;
case 50: case 51:
Parser.yy.table.verificarFuncion();
break;
case 52:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],Parser.yy.tipoVar.VOID)
break;
case 56:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-3],Parser.yy.tipoVar.VOID)
break;
case 57: case 60:
this.$ = $$[$0-3]
break;
case 58:
this.$ = $$[$0-4]
break;
case 63:
Parser.yy.table.capturarParametros($$[$0])
break;
case 66:
Parser.yy.table.existReturn()
break;
case 67:
Parser.yy.table.asignarValorVarGlobal($$[$0]+"",contenidoVar); contenidoVar = null
break;
case 68:
Parser.yy.table.capturarVariableGlobal(tipoAux,contenidoVar);contenidoVar = null
break;
case 71:
Parser.yy.table.validarSi($$[$0-3])
break;
case 77:
/*verificar que el primer item sea string*/
break;
case 80:
/*atrapar el itema para verificar su contenido*/
break;
case 81:
this.$ = true; 
break;
case 82:
this.$ = false; 
break;
case 83: case 84:
this.$ = Number(yytext); 
break;
case 85: case 86:
this.$ = yytext; 
break;
case 87:
this.$ = Parser.yy.table.contenidoVariable($$[$0]+"");
break;
case 88:
this.$ = Parser.yy.table.valoFuncion($$[$0]+"", true, false)
break;
case 89:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0]); 
break;
case 90:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 91:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 92:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 93:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 94:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 95:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 96:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 97:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 98:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 99:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 100:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 101:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 102:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 103:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 104:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 105:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 107:
this.$ = $$[$0]
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3,7:6,2:$V2,8:$V3,12:$V4,13:$V5}),{1:[3]},o($V0,$V1,{7:6,5:9,2:$V2,8:$V3}),{1:$V6,6:10,9:$V7,14:14,15:19,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:13,29:12,30:17,32:22,50:15,51:20,53:28,54:$Vd,55:16,56:21,61:11},o($Ve,[2,8],{4:30,12:$V4,13:$V5}),o($Ve,$Vf),o($V0,$V1,{7:6,5:31,2:$V2,8:$V3}),{9:[1,32]},{4:33,12:$V4,13:$V5},{1:$V6,6:34,9:$V7,14:14,15:19,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:13,29:12,30:17,32:22,50:15,51:20,53:28,54:$Vd,55:16,56:21,61:11},{1:[2,2]},{1:$V6,6:35,9:$V7,14:14,15:19,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:13,29:12,30:17,32:22,50:15,51:20,53:28,54:$Vd,55:16,56:21,61:11},o($V0,[2,66]),o($V0,[2,67]),o($V0,[2,68]),o($V0,[2,69]),o($V0,[2,70]),{4:36,12:$V4,13:$V5},{19:$Vg},{2:$Vh,9:[1,39],16:38,17:40},{34:[1,42]},{4:43,12:$V4,13:$V5},{15:47,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,33:[1,44],35:45,39:46},o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{15:47,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,33:[1,48],35:49,39:46},{9:[1,51],57:[1,50]},o($Ve,[2,7]),o($V0,[2,3]),{10:[1,52]},o($Vi,[2,6]),{1:[2,1]},{1:[2,64]},{31:53,40:54,41:55,48:56,49:$Vj},{2:$Vk,9:$Vl,20:58,28:59,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vv,[2,10]),o($Vw,$Vx,{36:[1,73]}),{2:[1,78],4:77,12:$V4,13:$V5,18:74,19:[1,75],21:[1,76]},{4:79,12:$V4,13:$V5},{4:80,12:$V4,13:$V5},{31:81,40:54,41:55,48:56,49:$Vj},{34:[1,82]},{33:[1,83]},{21:[1,84],33:[2,33]},{9:[1,85]},{34:[2,50]},{33:[1,86]},{36:[1,87]},{36:[1,88]},{11:[1,89]},o($V0,[2,26]),o($V0,[2,36],{40:54,41:55,48:56,31:90,49:$Vj}),{9:[1,101],14:91,15:100,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,27:92,37:98,38:[1,107],42:93,43:94,44:95,45:96,46:97,47:99,62:[1,102],63:[1,106],64:[1,104],69:[1,103],70:[1,105]},o($Vy,[2,47],{48:56,41:108,49:$Vj}),o([9,22,23,24,25,26,38,49,62,63,64,69,70],[2,48]),o($Vv,[2,23]),{4:109,12:$V4,13:$V5,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{4:125,12:$V4,13:$V5},{9:$Vl,28:126,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:127,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:128,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($VO,[2,107]),o($VO,[2,81]),o($VO,[2,82]),o($VO,[2,83]),o($VO,[2,84]),o($VO,[2,85]),o($VO,[2,86]),o($VO,[2,87],{36:[1,129]}),o($VO,[2,88]),o($VP,[2,29]),o($Vv,[2,11]),{2:$Vk,9:$Vl,20:130,28:59,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{2:$Vh,9:$VQ,16:131,17:40},o($Vv,[2,16]),{4:133,12:$V4,13:$V5},o($Vv,[2,12]),{40:135,41:55,48:56,49:$Vj,52:134},o($V0,[2,55]),o($VR,[2,27]),{34:[1,136]},{15:47,22:$V8,23:$V9,24:$Va,25:$Vb,26:$Vc,35:137,39:46},o($VS,[2,34]),{34:[2,51]},{33:[1,138]},o($VP,[2,52]),{4:139,12:$V4,13:$V5},o($V0,[2,35]),o($Vv,[2,37]),o($Vv,[2,38]),o($Vv,[2,39]),o($Vv,[2,40]),o($Vv,[2,41]),o($Vv,[2,42]),o($Vv,[2,43]),o($Vv,[2,44]),o($Vv,[2,45]),{2:$Vh,9:$VQ,16:38,17:40},{19:$Vg,36:[1,140]},{36:[1,141]},{36:[1,142]},{36:[1,143]},{36:[1,144]},{34:[1,145]},{4:147,9:$Vl,12:$V4,13:$V5,28:146,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vy,[2,46]),o($Vv,[2,24]),{9:$Vl,28:148,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:149,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:150,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:151,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:152,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:153,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:154,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:155,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:156,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:157,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:158,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:159,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:160,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:161,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:162,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vv,[2,25]),o($VO,[2,95]),o($VO,[2,96]),{33:[1,163],80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{9:$Vl,28:167,33:[1,164],36:$Vm,58:165,59:72,60:166,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vv,[2,14]),o($Vv,[2,15]),o($Vw,$Vx),o($Vv,[2,17]),o($V0,[2,49]),o($V0,[2,54],{41:55,48:56,40:135,52:168,49:$Vj}),o($VR,[2,28]),{33:[2,32]},{34:[1,169]},o($Vi,[2,5]),{9:$Vl,28:167,33:[1,170],36:$Vm,58:171,59:72,60:166,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:172,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{9:$Vl,28:173,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{23:[1,174]},{9:$Vl,28:177,36:$Vm,59:72,71:175,72:176,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{4:178,12:$V4,13:$V5},{4:179,12:$V4,13:$V5,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},o($Vv,[2,31]),o($VT,[2,89],{82:$VB,83:$VC,84:$VD}),o($VT,[2,90],{82:$VB,83:$VC,84:$VD}),o($VU,[2,91],{84:$VD}),o($VU,[2,92],{84:$VD}),o($VO,[2,93]),o($VT,[2,94],{82:$VB,83:$VC,84:$VD}),o($VV,[2,97],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VV,[2,98],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VV,[2,99],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VV,[2,100],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VV,[2,101],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VV,[2,102],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE}),o($VW,[2,103],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($VW,[2,104],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($VW,[2,105],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK}),o($VO,[2,106]),o($VO,[2,59]),{33:[1,180]},{21:[1,181],33:[2,62]},o($VS,[2,63],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN}),o($V0,[2,53]),o($VR,[2,56]),{4:182,12:$V4,13:$V5},{33:[1,183]},{33:[1,184],80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{33:[1,185],80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{9:[1,186]},{33:[1,187]},{21:[1,188],33:[2,79]},o($VS,[2,80],{80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN}),o($Vv,[2,72]),o($Vv,[2,30]),o($VO,[2,60]),{9:$Vl,28:167,36:$Vm,58:189,59:72,60:166,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vv,[2,57]),{4:190,12:$V4,13:$V5},{34:[1,191]},{34:[1,192]},{19:[1,193]},{4:194,12:$V4,13:$V5},{9:$Vl,28:177,36:$Vm,59:72,71:195,72:176,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{33:[2,61]},o($Vv,[2,58]),{4:196,12:$V4,13:$V5},{4:197,12:$V4,13:$V5},{9:$Vl,28:198,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},o($Vv,[2,77]),{33:[2,78]},o($Vv,[2,71]),o($Vv,[2,76]),{65:[1,199],80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{9:$Vl,28:200,36:$Vm,59:72,73:64,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,81:$Vt,86:$Vu},{65:[1,201],80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,87:$VF,88:$VG,89:$VH,90:$VI,91:$VJ,92:$VK,93:$VL,94:$VM,95:$VN},{66:202,67:[1,203],68:[1,204]},{33:[1,205]},{33:[2,74]},{33:[2,75]},{34:[1,206]},{4:207,12:$V4,13:$V5},o($Vv,[2,73])],
defaultActions: {10:[2,2],34:[2,1],35:[2,64],48:[2,50],86:[2,51],137:[2,32],189:[2,61],195:[2,78],203:[2,74],204:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
let operationCondicion = ""
let capturarOperadors = false
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una linea*/
break;
case 1:/*comentrio multilinea xd*/    
break;
case 2:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 49
break;
case 3:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 12
break;
case 4: Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); /*ignoramos */  
break;
case 5:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 8
break;
case 6:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 10
break;
case 7:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 11
break;
case 8:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'INSERTEZA'
break;
case 9:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 74
break;
case 10:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 75
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokenstring(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 79; 
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokenstring(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 78; 
break;
case 13:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 22
break;
case 14:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 24
break;
case 15:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 23
break;
case 16:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 26
break;
case 17:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 25
break;
case 18:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 54
break;
case 19:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 88
break;
case 20:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 91
break;
case 21:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 92
break;
case 22:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 87
break;
case 23:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 19
break;
case 24:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 86
break;
case 25:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 89
break;
case 26:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 90
break;
case 27:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'SIGINSERTEZA'
break;
case 28:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 94
break;
case 29:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 93
break;
case 30:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 95
break;
case 31:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 38
break;
case 32:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 57
break;
case 33:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 63
break;
case 34:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 62
break;
case 35:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 67
break;
case 36:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 68
break;
case 37:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 64
break;
case 38:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 69
break;
case 39:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DETENER'
break;
case 40:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'CONTINUAR'
break;
case 41:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 70
break;
case 42:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEA'
break;
case 43:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEC'
break;
case 44:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARAST'
break;
case 45:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJAREXP'
break;
case 46:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARTS'
break;
case 47:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 76
break;
case 48:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 9
break;
case 49:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 77
break;
case 50:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 34
break;
case 51:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 65
break;
case 52:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 21
break;
case 53:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 82
break;
case 54:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 83
break;
case 55:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 81
break;
case 56:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 80
break;
case 57:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 84
break;
case 58:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 85
break;
case 59:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 36
break;
case 60:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 33
break;
case 61:  return 13
break;
case 62:Parser.yy.errores.capturaErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yytex)
break;
}
},
rules: [/^(?:!!.*)/,/^(?:'''(.|\f|\n|\r|\s|\t)*''')/,/^(?:[\t])/,/^(?:[\n])/,/^(?:[\r|\s|\f]+)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:crl\b)/,/^(?:Incerteza\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Sino\b)/,/^(?:Si\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parserAnalisis;
exports.Parser = parserAnalisis.Parser;
exports.parse = function () { return parserAnalisis.parse.apply(parserAnalisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}